initialize()
{
	
	//non WF model type:
	initializeSLiMModelType("nonWF");
	
	//define life table constant for high mortality in junvenile stage
	//set up life table where oysters reach market size in 1-3 years 
	//constant L and probability of mortality at each age
	defineConstant("L", c(0.9, 0.2, 0.5, 0.5, 1.0));
	
	//define carrying capacity, for starters, letâ€™s say 500 individuals 
	defineConstant("K", 500);
	
	//define output path 
	defineConstant("output", "output/");
	
	//overall mutation rate per base position per generation across the whole chromosome from Nate
	initializeMutationRate(1e-5);
	
	//fixed neutral mutation
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	//fixed beneficial mutation, fully dominant, strongly beneficial  
	initializeMutationType("m2", 1.0, "f", -0.5);
	
	//fixed deleterious mutation, fully dominant, 
	initializeMutationType("m3", 1.0, "f", 0.5);
	
	//mutations will not convert to substitutions automatically (default of nonWF models, 		does not need to be written into script)
	
	//genomic element types: specifies type of chromosomal region
	initializeGenomicElementType("g1", c(m1, m2, m3), c(1.0, 0.01, 0.05));
	
	//genomic element type from above, that stretches from base position 0 to 99999
	//chromosome with length 100,000 base pairs 
	initializeGenomicElement(g1, 0, 99999);
	
	//recombination rate (cM/Mb)
	//estimated using recombination rate in Gagnaire et al. 2018 divided by pacific oyster genome size
	//3.05cM / 560 Mb
	initializeRecombinationRate(5.4e-9);
	
	//simulate separate sexes with a sex ratio default of 0.5
	initializeSex("A");
	
	//use simID as a unique identifier and remember random number seed
	defineConstant("simID", getSeed());

}

//reproduction callbacks are used for each individual in the model for the generation of offspring in nonWF models
//called once per individual, at the beginning of each generation
reproduction(NULL, "F")
{
	
	//subpopulation methods requesting new offspring with bi-parental mating 
	//will draw one random individual as a mate for individuals older than age 1 (reproductive maturity)
	if (individual.age > 1) {
		mate = subpop.sampleIndividuals(1, replace = T, sex="M", minAge=1);
		//add new offspring to the population
		subpop.addCrossed(individual, mate);
		//generate litters drawing from a Poisson distribution with a mean of 100,000
		//number of successful fertilizations for each spawning individual 
		litterSize = rpois(1, 10e4);
	}
}

//execution of early Eidos events: viability/survival selection
1 early()
{
	
	//set initial population size, after generation1 will vary over time by births/deaths
	//with random age from discrete uniform distribution from ages 0 to 6
	sim.addSubpop("p1", 1000);
	p1.individuals.age = rdunif (1000, min=0, max=3);

}

early()
{
	//life table based age-related mortality
	inds = p1.individuals;
	ages = inds.age;
	mortality = L[ages];
	survival = 1 - mortality;
	//survival-based fitness effect for each individual based on age
	inds.fitnessScaling = survival;
	
	//density-dependent mortality factoring in survival rate due to age-related mortality
	p1.fitnessScaling = K / (p1.individualCount * mean(survival));

}

//execution of late Eidos events: output events reflecting the final state at the end of a generation

200 late(){
	
	sim.outputFull();

}

